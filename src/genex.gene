# (import_native start_http_server from "build/libhttp")

(ns genex/http
  # Support:
  # HTTP
  # HTTPS
  # Get
  # Post
  # Put
  # Basic auth
  # Headers
  # Cookies
  # Query parameter
  # Post body - application/x-www-form
  # Post body - JSON
  # Response code
  # Response body
  # Response body - JSON

  (fn get [url params = {} headers = {}]
    (gene/native/http_get url params headers)
  )

  (fn ^^async get_async [url params = {} headers = {}]
    (gene/native/http_get_async url params headers)
  )

  (fn get_json [url params = {} headers = {}]
    (gene/json/parse (get url params headers))
  )

  # (var /parse_uri gene/native/http_parse_uri)

  (class Uri
  )

  (class Request
    (native_method method gene/native/http_req_method)
    (native_method url gene/native/http_req_url)
    (native_method params gene/native/http_req_params)
  )

  (class Response
    (method new [code body]
      (@code = code)
      (@body = body)
    )

    (method json _
      ((gene/json/parse @body) .to_json)
    )
  )

  # (var /start_server start_http_server)
  (var /start_server gene/native/http_start_server)
)

# https://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html
(ns genex/console
  # Create styled text for console
  (fn style []
  )
)

# TODO: support mocking / stubbing, how?

(ns genex/tests
  (class TestFailure < gene/Exception
  )

  (class TestSuite
    (method new [parent = nil, name]
      (@parent = parent)
      (@name = name)
      (@tests = [])
      (@setups = [])
      (@teardowns = [])
    )

    (method add_test test
      ((@tests) .add test)
    )

    (method run _
      (for test in (@tests)
        (test .run)
      )
    )
  )

  (class TestCase
    (method new [parent = nil, name, body]
      (@parent = parent)
      (@name = name)
      (@body = body)
    )

    (method run _
      (@body)
    )
  )

  (macro suite [name code...]
    (var success true)
    (println name " running...")
    (for e in code
      (if not (caller_eval e)
        (success = false)
      )
    )
    (if success
      (println name " [v]" )
      true
    else
      (println name " [x]" )
    )
  )

  (macro skip_suite [name code...]
  )

  (macro test [name code...]
    (var success true)
    (var messages [])
    (for e in code
      (try
        (caller_eval e)
      catch AssertionError
        (success = false)
        (messages .add ($ex .message))
      catch TestFailure
        (success = false)
        (messages .add ($ex .message))
        (break)
      )
    )
    (if success
      (println "[v] " name)
      true
    else
      (println "[x] " name)
      (for mesg in messages
        (println mesg)
      )
    )
  )

  (macro skip_test [name code...]
    (println "Skipped " name)
  )

  (macro fail [message = ""]
    (throw TestFailure message)
  )

  (macro setup code...
  )

  (macro teardown code...
  )
)

(ns genex/html
  (class Tag
    (method new [name attrs = {} children = []]
      (@name     = name)
      (@attrs    = attrs)
      (@children = children)
    )

    (method to_s _
      ("<" (.@name)
        (((.@attrs).map
          ([k v] ->
            (" " k "=\""
              (if (k == "style")
                ((v .map ([name value] -> ("" name ":" value ";"))).join)
              else
                v
              )
              "\""
            )
          )).join)
       ">\n"
        (((.@children).join "\n").trim)
       "\n</" (.@name) ">")
    )
  )

  # TODO: leaf tags

  (ns tags
    # HTML, BODY, DIV etc are part of this namespace
    (var tags :[
      HTML HEAD TITLE BODY DIV HEADER
      SVG RECT
    ])
    (for tag in tags
      (tag = (tag .to_s))
      (eval
        :(fn %tag [^attrs... children...]
          (new Tag %tag attrs children)
        ))
    )
  )

  (fn style [^props...]
    (fnx node
      (if (node .contain "style")
        ((node .@style).merge props)
      else
        ($set node @style props)
      )
      (:void)
    )
  )
)
