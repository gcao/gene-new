#!/usr/bin/env gene

(import genex/mysql:DB)
(import genex/http/*)
(import genex/html/tags/*)

# Prerequisites:
# A running database server
# A database ready to be used
# A user with proper access
(var $ns/DB_HOST ($env "DB_HOST" "localhost"))
(var $ns/DB_USER ($env "DB_USER"))
(var $ns/DB_PASS ($env "DB_PASS"))
(var $ns/DB_NAME ($env "DB_NAME" "todos"))

(fn init_db _
  (var conn (DB/open DB_HOST DB_USER DB_PASS DB_NAME))
  (conn .exec """
    CREATE TABLE IF NOT EXISTS `todos`.`todos` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `description` VARCHAR(255) NOT NULL,
      `status` INT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE
    )
  """)
)

(class Orm
  (method new @conn
  )

  (method exec [query params...]
    (/@conn .exec (query .to_s) params...)
  )
)

(class Query
  (method new @table
  )

  (method find id
    (.where "id = ?" id)
    (.limit 1)
  )

  (method select @select...
  )

  (method join join
    (@joins = (/@joins || []))
    (/@joins .add join)
  )

  (method where @where
  )

  (method order_by @order_by
  )

  (method limit n
    (@limit = n)
  )

  (method to_s _
    (var sql "SELECT ")
    (if /@select
      (sql .append (/@select .join ",") " ")
    else
      (sql .append "* ")
    )
    (sql .append "FROM " /@table " ")
    (if /@joins
      (sql .append (/@joins .join " ") " ")
    )
    (if /@where
      (sql .append "WHERE " /@where " ")
    )
    (if /@order_by
      (sql .append "ORDER BY " /@order_by " ")
    )
    (if /@limit
      (sql .append "LIMIT " /@limit)
    )
    sql
  )
)

(class Record
  (.on_extended (fnx child
    (child .on_member_missing (fnx name
      (if ([
        "orm" "all"
      ].contains name)
        (/.parent .@ name)
      )
    ))
  ))

  # Query all and convert each row to an instance of the model class
  (fn /all _
    (var query (new Query /table))
    (var data (/orm .exec query))
    (data .map (row ->
      (var props {})
      (for [i v] in row
        ($set props (@ (/columns/.keys .@ i)) v)
      )
      (new self props)
    ))
  )

  (method insert _
    (var columns /.class/columns/.keys)
    (var sql
      ("INSERT INTO " /.class/table "(" (columns .join ", ") ") "
        "VALUES(" ((columns .map (col -> "?")) .join ", ") ")"
      )
    )
    (var params (columns .map (col -> (.@ col))))
    (/.class/orm .exec sql params...)
  )

  # If no id, insert into the table, else update existing row.
  (method save _
    (if not /@id
      /.insert
    else
      /.update
    )
  )

  (method delete record_or_id
  )

  (method test _
    (println "Table:" /.class/table)
  )
)

(class Todo < Record
  (var /table "todos")
  (var /columns {
    ^id Int
    ^description String
    ^status Int
  })

  (method new props
    (@description = props/@description)
    (@status = props/@status)
  )

  (method set_done _
    (@status = 1)
  )

  (method set_todo _
    (@status = nil)
  )
)

(class App

  (method new @port
    (@middlewares = [])

    # Open connection to the database
    (var conn (DB/open DB_HOST DB_USER DB_PASS DB_NAME))
    # Create a instance of Orm with DB connection
    (var orm (new Orm conn))
    # Set orm member on Record class which gets inherited by child classes of Record
    (var Record/orm orm)
  )

  (method construct_handler middleware_index
    (if (middleware_index < /@middlewares/.size)
      (var middleware (/@middlewares .@ middleware_index))
      (var handler    (.construct_handler (middleware_index + 1)))
      (middleware handler)
    else
      /@handler
    )
  )

  (method start _
    (println "Starting HTTP server at port" /@port "...")

    (var root_handler (.construct_handler 0))
    (start_server /@port root_handler)
    (gene/run_forever)
  )
)

# Base class for controllers
(class Controller
  (method layout [title = "TODO App" content]
    (HTML
      (HEAD
        (META ^charset "utf-8")
        (META ^name "viewport" ^content "width=device-width, initial-scale=1")
        (TITLE title)
        (LINK ^rel "icon" ^type "image/png" ^href "http://minimal-todo.surge.sh/src/assets/favicon/favicon-32x32.png" ^sizes "32x32")
        (LINK ^rel "icon" ^type "image/png" ^href "http://minimal-todo.surge.sh/src/assets//favicon/favicon-16x16.png" ^sizes "16x16")
        (LINK ^href "https://cdn.jsdelivr.net/npm/tailwindcss/dist/tailwind.min.css" ^rel "stylesheet")
        (LINK ^href "https://fonts.googleapis.com/css?family=Raleway:300,400" ^rel "stylesheet")
        (STYLE """
          body {
            font-family: "Raleway", sans-serif;
            background-color: #111;
          }

          @media (max-width: 768px) {
            .github-corner {
              display: none;
            }
          }

          .github-corner:hover .octo-arm {
            animation: octocat-wave 560ms ease-in-out;
          }

          @keyframes octocat-wave {
            0%,
            100% {
              transform: rotate(0);
            }
            20%,
            60% {
              transform: rotate(-25deg);
            }
            40%,
            80% {
              transform: rotate(10deg);
            }
          }

          h1 span {
            color: #1dd1a1;
          }

          .input-wrapper input {
            transition: border-color 0.3s ease;
          }

          .input-wrapper input:focus {
            outline: none;
            border-color: #1dd1a1;
          }

          .input-wrapper .text-guide {
            right: 0;
            bottom: -8px;
            text-transform: uppercase;
          }

          .cbx__lbl {
            margin-left: 4px;
            vertical-align: middle;
            cursor: pointer;
            position: relative;
          }

          .cbx__lbl:after {
            content: "";
            width: 0%;
            height: 2px;
            background: #1dd1a1;
            position: absolute;
            left: 0;
            top: 50%;
            display: block;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
          }

          .cbx__lbl.completed {
            color: #c8ccd4;
          }

          .cbx__lbl.completed:after {
            width: 100%;
          }

          .cbx:checked~.cbx__child {
            border-color: transparent;
            background: #1dd1a1;
            animation: jelly 0.6s ease;
          }

          .cbx:checked~.cbx__child:after {
            opacity: 1;
            transform: rotate(45deg) scale(1);
          }

          @keyframes jelly {
            from {
              transform: scale(1, 1);
            }
            30% {
              transform: scale(1.25, 0.75);
            }
            40% {
              transform: scale(0.75, 1.25);
            }
            50% {
              transform: scale(1.15, 0.85);
            }
            65% {
              transform: scale(0.95, 1.05);
            }
            75% {
              transform: scale(1.05, 0.95);
            }
            to {
              transform: scale(1, 1);
            }
          }

          .cbx__child {
            position: relative;
            top: 1px;
            width: 17px;
            height: 17px;
            border: 1px solid #c8ccd4;
            border-radius: 3px;
            vertical-align: middle;
            display: inline-block;
            transition: background 0.1s ease;
            cursor: pointer;
          }

          .cbx__child:after {
            content: "";
            position: absolute;
            top: 1px;
            left: 5px;
            width: 5px;
            height: 11px;
            opacity: 0;
            transform: rotate(45deg) scale(0);
            border-right: 2px solid #fff;
            border-bottom: 2px solid #fff;
            transition: all 0.3s ease;
            transition-delay: 0.15s;
          }

          .fade-enter-active,
          .fade-leave-active {
            transition: opacity 0.3s;
          }

          .fade-enter,
          .fade-leave-to {
            opacity: 0;
          }

          .todo__item:hover .delete-button {
            opacity: 1;
            visibility: visible;
          }

          .todo__item:last-child {
            border-bottom: none;
          }

          .delete-button {
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease;
          }

          .delete-button svg {
            transition: all 0.3s ease;
            height: 20px;
          }

          .delete-button .feather {
            color: #fff;
          }

          .delete-button:hover .feather {
            color: #ff6b6b;
          }

          .delete-button:focus {
            outline: none;
            border: 1px dashed #ff6b6b;
          }

          .credit-disclaimer {
            color: #1dd1a1;
          }
        """)
      )
      (BODY ^class "text-center text-white"
        (DIV ^class "container mx-auto"
          (DIV ^class "mx-auto w-full md:w-1/2 py-8 px-4"
            (DIV ^class "flex items-center mb-6"
              (H1 ^class "text-4xl text-white mr-6"
                (SPAN "MINIMAL") " TO DO"
              )
              (IMG ^class "hidden md:block" ^src "http://minimal-todo.surge.sh/logo.f4bfa240.svg" ^width "40")
            )
            (FORM ^method "POST" ^action "/todos"
              (DIV ^class "input-wrapper relative"
                (INPUT ^type "text" ^name "description"
                  ^class "p-4 mb-4 w-full bg-transparent border-grey-light text-white border rounded"
                  ^placeholder "What needs to be done today?"
                )
                (SPAN ^class "text-guide text-gray-600 absolute text-xs" ^style {^display "none"}
                  "Press Enter"
                )
              )
              # Include a hidden Submit so that Enter will trigger submitting the form
              (INPUT ^type "submit" ^style {^display "none"})
            )
            (UL ^class "list-reset")
          )
        )
        content
        (BR)
        (BR)
        (BR)
        (BR)
        (DIV ^class "text-center text-sm credit-disclaimer"
          "This is a replication of Minimal TODO created by Dronca Raul"
        )
      )
    )
  )

  (method render args...
    (respond ((.layout args...).to_s))
  )
)

(class HomeController < Controller
  (method index req
    (redirect "/todos")
  )
)

(class TodosController < Controller
  (method index req
    (var todos (Todo . Todo/all))
    (.render
      (DIV
        (... (todos .map (todo ->
          (DIV todo/@description)
        )))
      )
    )
  )

  (method create req
    (var todo (new Todo req/.body_params))
    todo/.save
    (redirect "/todos")
  )
)

(class Mapping
  (method new [@path @controller @action @http_methods]
  )

  # Return bool: whether the path/method/... of the request matches
  (method match req
    (
      (req/.path == /@path) &&
      (/@http_methods/.empty || (/@http_methods .contains req/.method))
    )
  )
)

(class Router
  (method new _
    (@mappings = [])
  )

  (method map [^options... path controller action = "index"]
    (var http_methods [])
    (if options/@GET
      (http_methods .add "GET")
    )
    (if options/@POST
      (http_methods .add "POST")
    )
    (if options/@PUT
      (http_methods .add "PUT")
    )
    (if options/@DELETE
      (http_methods .add "DELETE")
    )
    (/@mappings .add (new Mapping path controller action http_methods))
  )

  (method call req
    (for m in /@mappings
      (if (m .match req)
        (var result ((new m/@controller) . m/@action req))
        (if result
          (return result)
        )
      )
    )
  )
)

($if_main
  (init_db)

  (var router ($tap (new Router)
    (.map "/" HomeController)
    (.map ^^POST "/todos" TodosController :create)
    (.map "/todos" TodosController)
  ))

  (var port
    (if ($cmd_args/.size > 1)
      $cmd_args/@1/.to_i
    else
      2080
    )
  )

  (var app ($tap (new App port)
    ($set @handler router)
  ))

  (app .start)
)
