#!/usr/bin/env gene

(import genex/mysql:DB)
(import genex/http/*)
(import genex/html/tags/*)

# Prerequisites:
# A running database server
# A database ready to be used
# A user with proper access
(var $ns/DB_HOST ($env "DB_HOST" "localhost"))
(var $ns/DB_USER ($env "DB_USER"))
(var $ns/DB_PASS ($env "DB_PASS"))
(var $ns/DB_NAME ($env "DB_NAME" "todos"))

(fn init_db _
  (var conn (DB/open DB_HOST DB_USER DB_PASS DB_NAME))
  (conn .exec """
    CREATE TABLE IF NOT EXISTS `todos`.`todos` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `description` VARCHAR(255) NOT NULL,
      `status` INT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE
    )
  """)
)

(class Record
  (method test _
    (println "Table:" /.class/table)
  )
)

(class Orm
  (method new @conn
  )

  (method exec query
    (@conn .exec (query .to_s))
  )

  # If no id, insert into the table, else update existing row.
  (method save record
  )

  (method delete record_or_id
  )
)

(class Query
  (method new @table
  )

  (method find id
    (.where "id = ?" id)
    (.limit 1)
  )

  (method all _
  )

  (method select @select...
  )

  (method join join
    (@joins ||= [])
    (@joins .add join)
  )

  (method where @where
  )

  (method order_by @order_by
  )

  (method limit n
    (@limit = n)
  )

  (method to_s _
    (var sql "SELECT ")
    (if @select
      (sql .append (@select .join ",") " ")
    else
      (sql .append "* ")
    )
    (sql .append "FROM " @table " ")
    (if @joins
      (sql .append (@joins .join " ") " ")
    )
    (if @where
      (sql .append "WHERE " @where " ")
    )
    (if @order_by
      (sql .append "ORDER BY " @order_by " ")
    )
    (if @limit
      (sql .append "LIMIT " @limit)
    )
  )
)

(class Todo < Record
  (var /table "todos")
  (var /columns {
    # id is assumed unless /skip_id is set to true
    ^description String
    ^status Int
  })

  (method new @description)

  (method set_done _
    (@status = 1)
  )

  (method set_todo _
    (@status = nil)
  )
)

(class App

  (method new @port
    (@middlewares = [])
  )

  (method construct_handler middleware_index
    (if (middleware_index < /@middlewares/.size)
      (var middleware (/@middlewares .@ middleware_index))
      (var handler    (.construct_handler (middleware_index + 1)))
      (middleware handler)
    else
      /@handler
    )
  )

  (method start _
    (println "Starting HTTP server at port" /@port "...")

    (var root_handler (.construct_handler 0))
    (start_server /@port root_handler)
    (gene/run_forever)
  )
)

# Base class for controllers
(class Controller
  (method render [title = "TODO App" content]
    (respond ((HTML
      (HEAD
        (TITLE title)
      )
      (BODY
        content
      )
    ).to_s))
  )
)

(class HomeController < Controller
  (method index req
    (redirect "/todos")
  )
)

(class TodosController < Controller
  (method index req
    (var conn (DB/open DB_HOST DB_USER DB_PASS DB_NAME))
    (var orm (new Orm conn))
    (var todos ((orm .from Todo) .all))
    (.render
      (DIV "Show all TODOs here.")
    )
  )

  (method create req
  )
)

(class Mapping
  (method new [@path @controller @action @http_method]
  )

  # Return bool: whether the path/method/... of the request matches
  (method match req
    (req/.path == /@path)
  )
)

(class Router
  (method new _
    (@mappings = [])
  )

  (method map [path controller action = "index"]
    (/@mappings .add (new Mapping path controller action))
  )

  (method call req
    (for m in /@mappings
      (if (m .match req)
        (var result ((new m/@controller) . m/@action req))
        (if result
          (return result)
        )
      )
    )
  )
)

($if_main
  (init_db)

  (var router (new Router))
  (router .map "/" HomeController)
  (router .map "/todos" TodosController)
  (router .map ^^post "/todos" TodosController :create)

  (var port
    (if ($cmd_args/.size > 1)
      $cmd_args/@1/.to_i
    else
      2080
    )
  )

  (var app ($tap (new App port)
    ($set @handler router)
  ))

  (app .start)
)
